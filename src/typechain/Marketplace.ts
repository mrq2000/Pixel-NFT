/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface MarketplaceInterface extends utils.Interface {
  functions: {
    "BNB()": FunctionFragment;
    "RATE_DENOMINATOR()": FunctionFragment;
    "acceptedTokens(address)": FunctionFragment;
    "addListing(uint256,uint256,address)": FunctionFragment;
    "cancelListing(uint256)": FunctionFragment;
    "changeListingPrice(uint256,uint256,address)": FunctionFragment;
    "disableTokens(address)": FunctionFragment;
    "enableTokens(address)": FunctionFragment;
    "getListingSlice(uint256,uint256)": FunctionFragment;
    "getNumberOfListings()": FunctionFragment;
    "nftAddress()": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "purchaseListing(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setExchangeToken(address)": FunctionFragment;
    "setNFTAddress(address)": FunctionFragment;
    "setTax(uint256)": FunctionFragment;
    "setTaxRecipient(address)": FunctionFragment;
    "tax()": FunctionFragment;
    "taxRecipient()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "BNB", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "RATE_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptedTokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addListing",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelListing",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeListingPrice",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "disableTokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "enableTokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getListingSlice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfListings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nftAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "purchaseListing",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setExchangeToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setNFTAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTax",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTaxRecipient",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "tax", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "taxRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(functionFragment: "BNB", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "RATE_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addListing", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeListingPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getListingSlice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nftAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "purchaseListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExchangeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNFTAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setTax", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTaxRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tax", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "taxRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;

  events: {
    "CancelledListing(address,uint256)": EventFragment;
    "ListingPriceChange(address,uint256,uint256,address)": EventFragment;
    "NewListing(address,uint256,uint256,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "PurchasedListing(address,address,uint256,uint256,address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CancelledListing"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ListingPriceChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewListing"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PurchasedListing"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export type CancelledListingEvent = TypedEvent<
  [string, BigNumber],
  { seller: string; nftID: BigNumber }
>;

export type CancelledListingEventFilter =
  TypedEventFilter<CancelledListingEvent>;

export type ListingPriceChangeEvent = TypedEvent<
  [string, BigNumber, BigNumber, string],
  { seller: string; nftID: BigNumber; price: BigNumber; currency: string }
>;

export type ListingPriceChangeEventFilter =
  TypedEventFilter<ListingPriceChangeEvent>;

export type NewListingEvent = TypedEvent<
  [string, BigNumber, BigNumber, string],
  { seller: string; nftID: BigNumber; price: BigNumber; currency: string }
>;

export type NewListingEventFilter = TypedEventFilter<NewListingEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PausedEvent = TypedEvent<[string], { account: string }>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type PurchasedListingEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, string],
  {
    buyer: string;
    seller: string;
    nftID: BigNumber;
    price: BigNumber;
    currency: string;
  }
>;

export type PurchasedListingEventFilter =
  TypedEventFilter<PurchasedListingEvent>;

export type UnpausedEvent = TypedEvent<[string], { account: string }>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface Marketplace extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MarketplaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BNB(overrides?: CallOverrides): Promise<[string]>;

    RATE_DENOMINATOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    acceptedTokens(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    addListing(
      _id: BigNumberish,
      _priceInWei: BigNumberish,
      currency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelListing(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeListingPrice(
      _id: BigNumberish,
      _newPriceInWei: BigNumberish,
      _newCurrency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    disableTokens(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    enableTokens(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getListingSlice(
      start: BigNumberish,
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[], string[], BigNumber[], string[]] & {
        returnedCount: BigNumber;
        ids: BigNumber[];
        sellers: string[];
        prices: BigNumber[];
        currencies: string[];
      }
    >;

    getNumberOfListings(overrides?: CallOverrides): Promise<[BigNumber]>;

    nftAddress(overrides?: CallOverrides): Promise<[string]>;

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    purchaseListing(
      _id: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setExchangeToken(
      _exchangeToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNFTAddress(
      _nftAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTax(
      _tax: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTaxRecipient(
      _taxRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tax(overrides?: CallOverrides): Promise<[BigNumber]>;

    taxRecipient(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  BNB(overrides?: CallOverrides): Promise<string>;

  RATE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

  acceptedTokens(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  addListing(
    _id: BigNumberish,
    _priceInWei: BigNumberish,
    currency: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelListing(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeListingPrice(
    _id: BigNumberish,
    _newPriceInWei: BigNumberish,
    _newCurrency: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  disableTokens(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  enableTokens(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getListingSlice(
    start: BigNumberish,
    length: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber[], string[], BigNumber[], string[]] & {
      returnedCount: BigNumber;
      ids: BigNumber[];
      sellers: string[];
      prices: BigNumber[];
      currencies: string[];
    }
  >;

  getNumberOfListings(overrides?: CallOverrides): Promise<BigNumber>;

  nftAddress(overrides?: CallOverrides): Promise<string>;

  onERC721Received(
    operator: string,
    from: string,
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  purchaseListing(
    _id: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setExchangeToken(
    _exchangeToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNFTAddress(
    _nftAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTax(
    _tax: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTaxRecipient(
    _taxRecipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tax(overrides?: CallOverrides): Promise<BigNumber>;

  taxRecipient(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BNB(overrides?: CallOverrides): Promise<string>;

    RATE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    acceptedTokens(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    addListing(
      _id: BigNumberish,
      _priceInWei: BigNumberish,
      currency: string,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelListing(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    changeListingPrice(
      _id: BigNumberish,
      _newPriceInWei: BigNumberish,
      _newCurrency: string,
      overrides?: CallOverrides
    ): Promise<void>;

    disableTokens(_token: string, overrides?: CallOverrides): Promise<void>;

    enableTokens(_token: string, overrides?: CallOverrides): Promise<void>;

    getListingSlice(
      start: BigNumberish,
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[], string[], BigNumber[], string[]] & {
        returnedCount: BigNumber;
        ids: BigNumber[];
        sellers: string[];
        prices: BigNumber[];
        currencies: string[];
      }
    >;

    getNumberOfListings(overrides?: CallOverrides): Promise<BigNumber>;

    nftAddress(overrides?: CallOverrides): Promise<string>;

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    purchaseListing(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setExchangeToken(
      _exchangeToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setNFTAddress(
      _nftAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTax(_tax: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setTaxRecipient(
      _taxRecipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    tax(overrides?: CallOverrides): Promise<BigNumber>;

    taxRecipient(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "CancelledListing(address,uint256)"(
      seller?: string | null,
      nftID?: BigNumberish | null
    ): CancelledListingEventFilter;
    CancelledListing(
      seller?: string | null,
      nftID?: BigNumberish | null
    ): CancelledListingEventFilter;

    "ListingPriceChange(address,uint256,uint256,address)"(
      seller?: string | null,
      nftID?: BigNumberish | null,
      price?: null,
      currency?: string | null
    ): ListingPriceChangeEventFilter;
    ListingPriceChange(
      seller?: string | null,
      nftID?: BigNumberish | null,
      price?: null,
      currency?: string | null
    ): ListingPriceChangeEventFilter;

    "NewListing(address,uint256,uint256,address)"(
      seller?: string | null,
      nftID?: BigNumberish | null,
      price?: null,
      currency?: string | null
    ): NewListingEventFilter;
    NewListing(
      seller?: string | null,
      nftID?: BigNumberish | null,
      price?: null,
      currency?: string | null
    ): NewListingEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "PurchasedListing(address,address,uint256,uint256,address)"(
      buyer?: string | null,
      seller?: null,
      nftID?: BigNumberish | null,
      price?: null,
      currency?: string | null
    ): PurchasedListingEventFilter;
    PurchasedListing(
      buyer?: string | null,
      seller?: null,
      nftID?: BigNumberish | null,
      price?: null,
      currency?: string | null
    ): PurchasedListingEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    BNB(overrides?: CallOverrides): Promise<BigNumber>;

    RATE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    acceptedTokens(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    addListing(
      _id: BigNumberish,
      _priceInWei: BigNumberish,
      currency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelListing(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeListingPrice(
      _id: BigNumberish,
      _newPriceInWei: BigNumberish,
      _newCurrency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    disableTokens(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    enableTokens(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getListingSlice(
      start: BigNumberish,
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumberOfListings(overrides?: CallOverrides): Promise<BigNumber>;

    nftAddress(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    purchaseListing(
      _id: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setExchangeToken(
      _exchangeToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNFTAddress(
      _nftAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTax(
      _tax: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTaxRecipient(
      _taxRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tax(overrides?: CallOverrides): Promise<BigNumber>;

    taxRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BNB(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    RATE_DENOMINATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptedTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addListing(
      _id: BigNumberish,
      _priceInWei: BigNumberish,
      currency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelListing(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeListingPrice(
      _id: BigNumberish,
      _newPriceInWei: BigNumberish,
      _newCurrency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    disableTokens(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    enableTokens(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getListingSlice(
      start: BigNumberish,
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumberOfListings(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nftAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    purchaseListing(
      _id: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setExchangeToken(
      _exchangeToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNFTAddress(
      _nftAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTax(
      _tax: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTaxRecipient(
      _taxRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tax(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    taxRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
